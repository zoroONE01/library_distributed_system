// Package main Distributed Library Management System API - Site Q3
//
// This is a distributed library management system implemented in Go with horizontal fragmentation and full replication.
// The system manages multiple library branches with distributed database operations.
//
// @title Distributed Library Management System API - Site Q3
// @version 1.0
// @description This is a distributed library management system with horizontal fragmentation and full replication
// @termsOfService N/A
//
// @contact.name API Support
// @contact.email dev@library.com
//
// @license.name MIT
// @license.url https://opensource.org/licenses/MIT
//
// @host localhost:8083
// @BasePath /
//
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
//
// @schemes http https
package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "library_distributed_server/docs/site-q3" // docs is generated by Swag CLI, you have to import it.
	"library_distributed_server/internal/auth"
	"library_distributed_server/internal/config"
	"library_distributed_server/internal/handlers"
	"library_distributed_server/internal/models"
	"library_distributed_server/internal/repository"
	"library_distributed_server/pkg/database"
	"library_distributed_server/pkg/utils"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

const SITE_ID = "Q3"

func main() {
	cfg, err := config.Load()
	if err != nil {
		log.Fatal("Failed to load configuration:", err)
	}

	// Override port for Q3 site
	cfg.Server.Port = 8083

	authService := auth.NewAuthService(cfg.Auth.JWTSecret, cfg.Auth.TokenExpiry)
	userRepo := repository.NewUserRepository(cfg, SITE_ID)
	bookRepo := repository.NewBookRepository(cfg)
	borrowRepo := repository.NewBorrowRepository(cfg)
	readerRepo := repository.NewReaderRepository(cfg)

	authHandler := handlers.NewAuthHandler(authService, userRepo)
	bookHandler := handlers.NewBookHandler(bookRepo, SITE_ID)
	borrowHandler := handlers.NewBorrowHandler(borrowRepo, SITE_ID)
	readerHandler := handlers.NewReaderHandler(readerRepo, SITE_ID)
	managerHandler := handlers.NewManagerHandler(bookRepo, borrowRepo, readerRepo)

	router := setupRouter(authHandler, bookHandler, borrowHandler, readerHandler, managerHandler)

	server := &http.Server{
		Addr:         fmt.Sprintf(":%d", cfg.Server.Port),
		Handler:      router,
		ReadTimeout:  cfg.Server.ReadTimeout,
		WriteTimeout: cfg.Server.WriteTimeout,
		IdleTimeout:  cfg.Server.IdleTimeout,
	}

	go func() {
		log.Printf("Site %s server starting on port %d", SITE_ID, cfg.Server.Port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal("Server failed to start:", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatal("Server forced to shutdown:", err)
	}

	database.GetPool().CloseAll()
	log.Println("Server exited")
}

func setupRouter(
	authHandler *handlers.AuthHandler,
	bookHandler *handlers.BookHandler,
	borrowHandler *handlers.BorrowHandler,
	readerHandler *handlers.ReaderHandler,
	managerHandler *handlers.ManagerHandler,
) *gin.Engine {
	gin.SetMode(gin.ReleaseMode)
	router := gin.Default()

	// Add CORS middleware
	router.Use(utils.CORS())

	// Swagger endpoint
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// @Summary Health check
	// @Description Check if the service is running
	// @Tags Health
	// @Produce json
	// @Success 200 {object} models.HealthResponse "Service is healthy"
	// @Router /health [get]
	router.GET("/health", func(c *gin.Context) {
		c.JSON(200, models.HealthResponse{
			Status:  "healthy",
			Site:    SITE_ID,
			Time:    time.Now(),
			Service: fmt.Sprintf("Site %s API", SITE_ID),
		})
	})

	// Auth routes (public)
	authGroup := router.Group("/auth")
	{
		authGroup.POST("/login", authHandler.Login)
		authGroup.POST("/logout", authHandler.RequireAuth(), authHandler.Logout)
		authGroup.GET("/profile", authHandler.RequireAuth(), authHandler.GetCurrentUser)
	}

	api := router.Group("/api")
	api.Use(authHandler.RequireAuth())
	{
		// Site-specific routes (ThuThu access)
		siteRoutes := api.Group("/site/" + SITE_ID)
		siteRoutes.Use(authHandler.RequireSiteAccess(SITE_ID))
		{
			// Book operations
			siteRoutes.GET("/books", bookHandler.GetBooks)
			siteRoutes.GET("/book-copies", bookHandler.GetBookCopies)
			siteRoutes.GET("/books/:isbn", bookHandler.GetBookByISBN)
			siteRoutes.GET("/books/:isbn/available", bookHandler.GetAvailableBookCopy)

			// FR9 - Book copy CRUD (ThuThu only)
			siteRoutes.POST("/book-copies", authHandler.RequireRole("THUTHU"), bookHandler.CreateQuyenSach)
			siteRoutes.GET("/book-copies/:maQuyenSach", bookHandler.GetQuyenSach)
			siteRoutes.PUT("/book-copies/:maQuyenSach", authHandler.RequireRole("THUTHU"), bookHandler.UpdateQuyenSach)
			siteRoutes.DELETE("/book-copies/:maQuyenSach", authHandler.RequireRole("THUTHU"), bookHandler.DeleteQuyenSach)

			// FR2, FR3 - Borrowing operations
			siteRoutes.POST("/borrow", authHandler.RequireRole("THUTHU"), borrowHandler.CreateBorrow)
			siteRoutes.PUT("/return/:id", authHandler.RequireRole("THUTHU"), borrowHandler.ReturnBook)
			siteRoutes.GET("/borrows", borrowHandler.GetBorrows)

			// FR8 - Reader CRUD operations
			siteRoutes.GET("/readers", readerHandler.GetAllDocGia)
			siteRoutes.POST("/readers", authHandler.RequireRole("THUTHU"), readerHandler.CreateDocGia)
			siteRoutes.GET("/readers/:maDG", readerHandler.GetDocGia)
			siteRoutes.PUT("/readers/:maDG", authHandler.RequireRole("THUTHU"), readerHandler.UpdateDocGia)
			siteRoutes.DELETE("/readers/:maDG", authHandler.RequireRole("THUTHU"), readerHandler.DeleteDocGia)
		}

		// Manager routes (QuanLy access only)
		managerRoutes := api.Group("/manager")
		managerRoutes.Use(authHandler.RequireRole("QUANLY"))
		{
			// FR10 - Book catalog management with 2PC
			managerRoutes.POST("/books", managerHandler.CreateSach)
			managerRoutes.GET("/books/:isbn", managerHandler.GetSach)

			// FR7 - Distributed book search
			managerRoutes.GET("/books/search", managerHandler.SearchAvailableBooks)

			// FR6 - System statistics
			managerRoutes.GET("/statistics", managerHandler.GetSystemStats)

			// FR11 - Global reader access
			managerRoutes.GET("/readers", managerHandler.GetAllReaders)
		}
	}

	return router
}
