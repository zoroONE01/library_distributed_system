// Package main Distributed Library Management System API
//
// This is a distributed library management system implemented in Go with horizontal fragmentation and full replication.
// The system manages multiple library branches with distributed database operations.
//
// @title Distributed Library Management System API - Site Q1
// @version 1.0
// @description This is a distributed library management system with horizontal fragmentation and full replication
// @termsOfService N/A
//
// @contact.name API Support
// @contact.email dev@library.com
//
// @license.name MIT
// @license.url https://opensource.org/licenses/MIT
//
// @host localhost:8081
// @BasePath /
//
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
//
// @schemes http https
package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"library_distributed_server/internal/auth"
	"library_distributed_server/internal/config"
	"library_distributed_server/internal/handlers"
	"library_distributed_server/internal/models"
	"library_distributed_server/internal/repository"
	"library_distributed_server/pkg/database"
	"library_distributed_server/pkg/utils"

	_ "library_distributed_server/docs/site-q1" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

const SITE_ID = "Q1"

func main() {
	cfg, err := config.Load()
	if err != nil {
		log.Fatal("Failed to load configuration:", err)
	}

	// Override port for Q1 site
	cfg.Server.Port = 8081

	authService := auth.NewAuthService(cfg.Auth.JWTSecret, cfg.Auth.TokenExpiry)
	userRepo := repository.NewUserRepository(cfg, SITE_ID)
	bookRepo := repository.NewBookRepository(cfg, SITE_ID)
	borrowRepo := repository.NewBorrowRepository(cfg, SITE_ID)
	readerRepo := repository.NewReaderRepository(cfg, SITE_ID)
	authHandler := handlers.NewAuthHandler(authService, userRepo)
	bookHandler := handlers.NewBookHandler(bookRepo, SITE_ID)
	borrowHandler := handlers.NewBorrowHandler(borrowRepo, SITE_ID)
	readerHandler := handlers.NewReaderHandler(readerRepo, SITE_ID)
	managerHandler := handlers.NewManagerHandler(bookRepo, borrowRepo, readerRepo)
	statsHandler := handlers.NewStatsHandler(repository.NewStatsRepository(cfg), SITE_ID)

	router := setupRouter(authHandler, bookHandler, borrowHandler, readerHandler, managerHandler, statsHandler)
	server := &http.Server{
		Addr:         fmt.Sprintf(":%d", cfg.Server.Port),
		Handler:      router,
		ReadTimeout:  cfg.Server.ReadTimeout,
		WriteTimeout: cfg.Server.WriteTimeout,
		IdleTimeout:  cfg.Server.IdleTimeout,
	}
	go func() {
		log.Printf("Site %s server starting on port %d", SITE_ID, cfg.Server.Port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal("Server failed to start:", err)
		}
	}()
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	if err := server.Shutdown(ctx); err != nil {
		log.Fatal("Server forced to shutdown:", err)
	}
	database.GetPool().CloseAll()
	log.Println("Server exited")
}

func setupRouter(
	authHandler *handlers.AuthHandler,
	bookHandler *handlers.BookHandler,
	borrowHandler *handlers.BorrowHandler,
	readerHandler *handlers.ReaderHandler,
	managerHandler *handlers.ManagerHandler,
	statsHandler *handlers.StatsHandler,
) *gin.Engine {
	gin.SetMode(gin.ReleaseMode)
	router := gin.Default()

	// Add CORS middleware
	router.Use(utils.CORS())

	// Swagger endpoint
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// @Summary Health check
	// @Description Check if the service is running
	// @Tags Health
	// @Produce json
	// @Success 200 {object} models.HealthResponse "Service is healthy"
	// @Router /health [get]
	router.GET("/health", func(c *gin.Context) {
		c.JSON(200, models.HealthResponse{
			Status:  "healthy",
			Site:    SITE_ID,
			Time:    time.Now(),
			Service: fmt.Sprintf("Site %s API", SITE_ID),
		})
	})

	// Auth routes (public)
	authGroup := router.Group("/auth")
	{
		authGroup.POST("/login", authHandler.Login)
		authGroup.POST("/logout", authHandler.RequireAuth(), authHandler.Logout)
		authGroup.GET("/profile", authHandler.RequireAuth(), authHandler.GetCurrentUser)
	}

	// Universal routes - role-based access control applied within handlers
	// These routes can be accessed from any site based on user role and permissions

	// Book operations - accessible to all authenticated users with appropriate role checks
	booksGroup := router.Group("/books")
	booksGroup.Use(authHandler.RequireAuth())
	{
		booksGroup.GET("", bookHandler.GetBooks)                             // All roles: view book catalog
		booksGroup.GET("/:isbn", bookHandler.GetBookByISBN)                  // All roles: view book details
		booksGroup.GET("/:isbn/available", bookHandler.GetAvailableBookCopy) // All roles: check availability
	}

	// Book copies operations - site and role specific
	bookCopiesGroup := router.Group("/book-copies")
	bookCopiesGroup.Use(authHandler.RequireAuth())
	{
		bookCopiesGroup.GET("", bookHandler.GetBookCopies)                                                                            // All roles: view copies
		bookCopiesGroup.POST("", authHandler.ValidateOperationAccess("CREATE_BOOK_COPY"), bookHandler.CreateQuyenSach)                // FR9: THUTHU only
		bookCopiesGroup.GET("/:maQuyenSach", bookHandler.GetQuyenSach)                                                                // All roles: view copy details
		bookCopiesGroup.PUT("/:maQuyenSach", authHandler.ValidateOperationAccess("UPDATE_BOOK_COPY"), bookHandler.UpdateQuyenSach)    // FR9: THUTHU only
		bookCopiesGroup.DELETE("/:maQuyenSach", authHandler.ValidateOperationAccess("DELETE_BOOK_COPY"), bookHandler.DeleteQuyenSach) // FR9: THUTHU only
	}

	// Borrowing operations - THUTHU only at their site
	borrowGroup := router.Group("/borrow")
	borrowGroup.Use(authHandler.RequireAuth())
	{
		borrowGroup.POST("", authHandler.ValidateOperationAccess("BORROW_BOOK"), borrowHandler.CreateBorrow)         // FR2: THUTHU only
		borrowGroup.PUT("/return/:id", authHandler.ValidateOperationAccess("RETURN_BOOK"), borrowHandler.ReturnBook) // FR3: THUTHU only
		borrowGroup.GET("", borrowHandler.GetBorrows)                                                                // View borrows - role-based filtering in handler
		borrowGroup.GET("/detailed", borrowHandler.GetBorrowRecordsWithDetails)                                      // Enhanced detailed view for Flutter
	}

	// Reader operations - site and role specific
	readersGroup := router.Group("/readers")
	readersGroup.Use(authHandler.RequireAuth())
	{
		readersGroup.GET("", readerHandler.GetAllDocGia)                                                                // Role-based: THUTHU sees local, QUANLY sees all
		readersGroup.POST("", authHandler.ValidateOperationAccess("CREATE_READER"), readerHandler.CreateDocGia)         // FR8: THUTHU only
		readersGroup.GET("/:maDG", readerHandler.GetDocGia)                                                             // Role-based: THUTHU sees local, QUANLY sees all
		readersGroup.PUT("/:maDG", authHandler.ValidateOperationAccess("UPDATE_READER"), readerHandler.UpdateDocGia)    // FR8: THUTHU only
		readersGroup.DELETE("/:maDG", authHandler.ValidateOperationAccess("DELETE_READER"), readerHandler.DeleteDocGia) // FR8: THUTHU only
	}

	// Statistics operations - Enhanced for Flutter
	statsGroup := router.Group("/stats")
	statsGroup.Use(authHandler.RequireAuth())
	{
		statsGroup.GET("/readers", statsHandler.GetReadersWithStats)                                                     // Enhanced reader statistics
		statsGroup.GET("/system", authHandler.ValidateOperationAccess("VIEW_SYSTEM_STATS"), statsHandler.GetSystemStats) // Manager-only system stats
	}

	// Manager-only operations - system-wide access
	managerGroup := router.Group("/manager")
	managerGroup.Use(authHandler.RequireAuth())
	managerGroup.Use(authHandler.RequireRole("QUANLY")) // Only QUANLY can access these endpoints
	{
		// FR10 - Book catalog management with 2PC
		managerGroup.POST("/books", managerHandler.CreateSach)   // Create book in catalog
		managerGroup.GET("/books/:isbn", managerHandler.GetSach) // Get book from catalog

		// FR7 - Distributed book search
		managerGroup.GET("/books/search", managerHandler.SearchAvailableBooks) // System-wide book search

		// FR6 - System statistics
		managerGroup.GET("/statistics", managerHandler.GetSystemStats) // System-wide statistics

		// FR11 - Global reader access
		managerGroup.GET("/readers", managerHandler.GetAllReaders) // System-wide reader access
	}

	// NOTE: Legacy site-specific routes with /site/{siteID} have been removed
	// All operations now use role-based authentication with site info from JWT tokens
	// This provides better security and eliminates the need for site parameters in URLs

	return router
}
