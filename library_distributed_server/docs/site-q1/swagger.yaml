basePath: /
definitions:
  auth.LoginRequest:
    description: User login credentials
    properties:
      password:
        description: Password
        example: password123
        type: string
      username:
        description: Username
        example: thuthu01
        type: string
    required:
    - password
    - username
    type: object
  auth.LoginResponse:
    description: Successful login response with JWT access token only
    properties:
      accessToken:
        description: JWT access token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  main.TransferBookRequest:
    properties:
      fromSite:
        description: Source site ID
        example: Q1
        type: string
      maQuyenSach:
        description: Book copy ID to transfer
        example: QS001
        type: string
      toSite:
        description: Destination site ID
        example: Q3
        type: string
    required:
    - fromSite
    - maQuyenSach
    - toSite
    type: object
  models.BookSearchResult:
    description: Book search result with availability across branches
    properties:
      chiNhanh:
        description: Available branches
        items:
          $ref: '#/definitions/models.ChiNhanh'
        type: array
      sach:
        allOf:
        - $ref: '#/definitions/models.Sach'
        description: Book information
      soLuongCo:
        description: Total available copies
        example: 5
        type: integer
    type: object
  models.BookWithAvailability:
    description: Book information combined with availability count for client applications
    properties:
      availableCount:
        description: Available copies count
        example: 5
        type: integer
      borrowedCount:
        description: Currently borrowed count
        example: 5
        type: integer
      isbn:
        description: Book ISBN (ID)
        example: 978-0-123456-78-9
        type: string
      tacGia:
        description: Author name
        example: Nguyễn Văn A
        type: string
      tenSach:
        description: Book title
        example: Lập trình Go
        type: string
      totalCount:
        description: Total copies count
        example: 10
        type: integer
    type: object
  models.ChiNhanh:
    description: Branch information (fully replicated across all sites)
    properties:
      diaChi:
        description: Branch address
        example: 123 Nguyễn Huệ, Q1, TP.HCM
        type: string
      maCN:
        description: Branch code
        example: Q1
        type: string
      tenCN:
        description: Branch name
        example: Thư Viện Quận 1
        type: string
    required:
    - maCN
    - tenCN
    type: object
  models.CreateBorrowRequest:
    description: Request payload for creating a borrow transaction
    properties:
      maDG:
        description: Reader ID
        example: DG001
        type: string
      maQuyenSach:
        description: Book copy ID
        example: QS001
        type: string
    required:
    - maDG
    - maQuyenSach
    type: object
  models.DocGia:
    description: Reader information (fragmented by registration branch)
    properties:
      hoTen:
        description: Reader name
        example: Nguyễn Văn B
        type: string
      maCNDangKy:
        description: Registration branch
        example: Q1
        type: string
      maDG:
        description: Reader ID
        example: DG001
        type: string
    required:
    - hoTen
    - maCNDangKy
    - maDG
    type: object
  models.ErrorResponse:
    description: Generic error response
    properties:
      details:
        description: Error details (optional)
      error:
        description: Error message
        example: Bad Request
        type: string
    type: object
  models.ListResponse:
    description: Generic paginated list response matching Flutter BookListModel structure
    properties:
      items:
        description: List of items (matches Flutter items field)
      paging:
        allOf:
        - $ref: '#/definitions/models.PagingInfo'
        description: Pagination info (matches Flutter paging field)
    type: object
  models.PagingInfo:
    description: Pagination information matching Flutter PagingModel structure
    properties:
      page:
        description: Current page number (0-based, matches Flutter)
        example: 0
        type: integer
      size:
        description: Items per page (matches Flutter)
        example: 20
        type: integer
      totalPages:
        description: Total number of pages (matches Flutter)
        example: 10
        type: integer
    type: object
  models.PhieuMuon:
    description: Borrow transaction (fragmented by branch)
    properties:
      maCN:
        description: Branch code
        example: Q1
        type: string
      maDG:
        description: Reader ID
        example: DG001
        type: string
      maPM:
        description: Borrow ID (auto-generated)
        example: 1
        type: integer
      maQuyenSach:
        description: Book copy ID
        example: QS001
        type: string
      ngayMuon:
        description: Borrow date
        example: "2025-01-15T10:00:00Z"
        type: string
      ngayTra:
        description: Return date (null if not returned)
        example: "2025-01-20T14:00:00Z"
        type: string
    required:
    - maCN
    - maDG
    - maQuyenSach
    type: object
  models.QuyenSach:
    description: Book copy information (fragmented by branch)
    properties:
      isbn:
        description: Book ISBN
        example: 978-0-123456-78-9
        type: string
      maCN:
        description: Branch code
        example: Q1
        type: string
      maQuyenSach:
        description: Book copy ID
        example: QS001
        type: string
      tinhTrang:
        description: Book status
        enum:
        - Có sẵn
        - Đang mượn
        - Bị hỏng
        example: Có sẵn
        type: string
    required:
    - isbn
    - maCN
    - maQuyenSach
    type: object
  models.ReturnBookRequest:
    description: Request payload for returning a borrowed book
    properties:
      maQuyenSach:
        description: Book copy ID (optional)
        example: QS001
        type: string
      ngayTra:
        description: Return date
        example: "2025-01-20T14:00:00Z"
        type: string
    type: object
  models.Sach:
    description: Book information (fully replicated across all sites)
    properties:
      isbn:
        description: Book ISBN
        example: 978-0-123456-78-9
        type: string
      tacGia:
        description: Author name
        example: Nguyễn Văn A
        type: string
      tenSach:
        description: Book title
        example: Lập trình Go
        type: string
    required:
    - isbn
    - tenSach
    type: object
  models.SiteStats:
    description: Site-specific statistics
    properties:
      booksOnLoan:
        description: Books currently on loan
        example: 75
        type: integer
      siteID:
        description: Site identifier
        example: Q1
        type: string
      totalBooks:
        description: Total books in this site
        example: 500
        type: integer
      totalReaders:
        description: Total registered readers
        example: 200
        type: integer
    type: object
  models.SuccessResponse:
    description: Generic success response
    properties:
      data:
        description: Response data (optional)
      message:
        description: Success message
        example: Operation completed successfully
        type: string
      success:
        description: Operation success status
        example: true
        type: boolean
    type: object
  models.SystemStats:
    description: Distributed system statistics
    properties:
      statsBySite:
        additionalProperties:
          $ref: '#/definitions/models.SiteStats'
        description: Statistics by site
        type: object
      totalBooksOnLoan:
        description: Total books on loan across all sites
        example: 150
        type: integer
    type: object
  models.SystemStatsResponse:
    description: Comprehensive system statistics across all sites
    properties:
      activeBorrows:
        description: Currently borrowed books
        example: 500
        type: integer
      generatedAt:
        description: Stats generation time
        example: "2025-01-15T10:00:00Z"
        type: string
      overdueBooks:
        description: Overdue books
        example: 50
        type: integer
      popularBooks:
        description: Most borrowed books
        items:
          $ref: '#/definitions/models.BookWithAvailability'
        type: array
      siteStats:
        description: Per-site statistics
        items:
          $ref: '#/definitions/models.SiteStats'
        type: array
      totalBooks:
        description: Total books in catalog
        example: 1000
        type: integer
      totalCopies:
        description: Total book copies
        example: 5000
        type: integer
      totalReaders:
        description: Total registered readers
        example: 2000
        type: integer
    type: object
  models.TransferBookResponse:
    description: Response after successful book transfer using 2PC protocol
    properties:
      coordinator:
        description: Coordinator service
        example: Distributed Transaction Coordinator
        type: string
      fromSite:
        description: Source site ID
        example: Q1
        type: string
      maQuyenSach:
        description: Transferred book copy ID
        example: QS001
        type: string
      message:
        description: Success message
        example: Book transferred successfully using 2PC protocol
        type: string
      protocol:
        description: Protocol used
        example: Two-Phase Commit (2PC)
        type: string
      toSite:
        description: Destination site ID
        example: Q3
        type: string
    type: object
  models.UserInfo:
    description: Detailed user information including permissions
    properties:
      id:
        description: User ID
        example: user123
        type: string
      maCN:
        description: Branch code (for THUTHU)
        example: Q1
        type: string
      permissions:
        description: User permissions
        example: SELECT,INSERT,UPDATE,EXECUTE
        type: string
      role:
        description: User role
        enum:
        - THUTHU
        - QUANLY
        example: THUTHU
        type: string
      username:
        description: Username
        example: ThuThu_Q1
        type: string
    required:
    - username
    type: object
host: localhost:8081
info:
  contact:
    email: dev@library.com
    name: API Support
  description: This is a distributed library management system with horizontal fragmentation
    and full replication
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: N/A
  title: Distributed Library Management System API - Site Q1
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user using stored procedure and return JWT access
        token only
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with access token
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user (invalidate token on client side)
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /auth/profile:
    get:
      description: Get detailed information about the currently authenticated user
        including role, branch, and permissions
      produces:
      - application/json
      responses:
        "200":
          description: User profile information
          schema:
            $ref: '#/definitions/models.UserInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Authentication
  /book-copies:
    get:
      description: Get book copies with pagination - THUTHU sees local site only,
        QUANLY sees system-wide
      parameters:
      - default: 0
        description: Page number (0-based)
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: size
        type: integer
      - description: Search term for book title, author, or ISBN
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book copies retrieved successfully
          schema:
            $ref: '#/definitions/models.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get book copies based on user role with pagination
      tags:
      - Book Copies
    post:
      consumes:
      - application/json
      description: Create a new book copy at the user's site (ThuThu only)
      parameters:
      - description: Book copy information
        in: body
        name: bookCopy
        required: true
        schema:
          $ref: '#/definitions/models.QuyenSach'
      produces:
      - application/json
      responses:
        "201":
          description: Book copy created successfully
          schema:
            $ref: '#/definitions/models.QuyenSach'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - ThuThu only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Book copy already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new book copy
      tags:
      - Book Copies
  /book-copies/{maQuyenSach}:
    delete:
      description: Delete a book copy (ThuThu only)
      parameters:
      - description: Book copy ID
        in: path
        name: maQuyenSach
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Book copy deleted successfully
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - ThuThu only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Book copy not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Cannot delete book copy currently on loan
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete book copy
      tags:
      - Book Copies
    get:
      description: Get book copy information by ID
      parameters:
      - description: Book copy ID
        in: path
        name: maQuyenSach
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book copy found
          schema:
            $ref: '#/definitions/models.QuyenSach'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Book copy not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get book copy by ID
      tags:
      - Book Copies
    put:
      consumes:
      - application/json
      description: Update book copy information (ThuThu only)
      parameters:
      - description: Book copy ID
        in: path
        name: maQuyenSach
        required: true
        type: string
      - description: Updated book copy information
        in: body
        name: bookCopy
        required: true
        schema:
          $ref: '#/definitions/models.QuyenSach'
      produces:
      - application/json
      responses:
        "200":
          description: Book copy updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - ThuThu only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Book copy not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update book copy
      tags:
      - Book Copies
  /books:
    get:
      description: Get all books available in the library system with availability
        count and pagination (enhanced for Flutter app)
      parameters:
      - default: 0
        description: Page number (0-based)
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Books with availability retrieved successfully
          schema:
            $ref: '#/definitions/models.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all books with availability and pagination
      tags:
      - Books
  /books/{isbn}:
    get:
      description: Get detailed information about a specific book by its ISBN
      parameters:
      - description: Book ISBN
        in: path
        name: isbn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book found
          schema:
            $ref: '#/definitions/models.Sach'
        "400":
          description: Invalid ISBN parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get book by ISBN
      tags:
      - Books
  /books/{isbn}/available:
    get:
      description: Get an available copy of a book at the current site
      parameters:
      - description: Book ISBN
        in: path
        name: isbn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Available copy found
          schema:
            $ref: '#/definitions/models.QuyenSach'
        "400":
          description: Invalid ISBN parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: No available copy found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get available book copy
      tags:
      - Books
  /borrow:
    get:
      description: Get all borrow records for the current site with pagination (Librarian
        only)
      parameters:
      - default: 0
        description: Page number (0-based)
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: size
        type: integer
      - description: Search term for reader name or borrow ID
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Borrow records retrieved successfully
          schema:
            $ref: '#/definitions/models.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied to this site
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to retrieve borrow records
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get borrow records with pagination
      tags:
      - Borrowing
    post:
      consumes:
      - application/json
      description: Create a new book borrowing transaction (Librarian only)
      parameters:
      - description: Borrow request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateBorrowRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Borrow record created successfully
          schema:
            $ref: '#/definitions/models.PhieuMuon'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied to this site
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to create borrow record
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create borrow transaction
      tags:
      - Borrowing
  /borrow/detailed:
    get:
      description: Get borrow records with book and reader details with pagination
        (enhanced for Flutter app)
      parameters:
      - default: 0
        description: Page number (0-based)
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: size
        type: integer
      - description: Search term for book title, author, or reader name
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Detailed borrow records retrieved successfully
          schema:
            $ref: '#/definitions/models.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get borrow records with details and pagination
      tags:
      - Borrowing
  /borrow/return/{id}:
    put:
      consumes:
      - application/json
      description: Return a borrowed book and update its status (Librarian only)
      parameters:
      - description: Borrow transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Return details (optional)
        in: body
        name: request
        schema:
          $ref: '#/definitions/models.ReturnBookRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Book returned successfully
        "400":
          description: Invalid borrow ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied to this site
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to return book
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Return borrowed book
      tags:
      - Borrowing
  /coordinator/transfer-book:
    post:
      consumes:
      - application/json
      description: Transfer a book copy from one site to another using distributed
        transaction coordination
      parameters:
      - description: Book transfer request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.TransferBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Book transferred successfully
          schema:
            $ref: '#/definitions/models.TransferBookResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to transfer book
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Transfer book between sites using 2PC
      tags:
      - Coordinator
  /manager/books:
    post:
      consumes:
      - application/json
      description: Create a new book in the catalog using 2-Phase Commit (Manager
        only)
      parameters:
      - description: Book information
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Sach'
      produces:
      - application/json
      responses:
        "201":
          description: Book created successfully
          schema:
            $ref: '#/definitions/models.Sach'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - Manager only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Book already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new book (2PC)
      tags:
      - Manager
  /manager/books/{isbn}:
    get:
      description: Get book information by ISBN (Manager only)
      parameters:
      - description: Book ISBN
        in: path
        name: isbn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book found
          schema:
            $ref: '#/definitions/models.Sach'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - Manager only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get book by ISBN
      tags:
      - Manager
  /manager/books/search:
    get:
      description: Search for available books across all sites (Manager only)
      parameters:
      - description: Book title search term
        in: query
        name: tenSach
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            items:
              $ref: '#/definitions/models.BookSearchResult'
            type: array
        "400":
          description: Missing search parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - Manager only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search available books system-wide
      tags:
      - Manager
  /manager/readers:
    get:
      description: Get all readers from all sites in the distributed system (Manager
        only)
      parameters:
      - description: Search term for reader name
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Readers retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.DocGia'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - Manager only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all readers system-wide
      tags:
      - Manager
  /manager/statistics:
    get:
      description: Get comprehensive statistics from all sites in the distributed
        system (Manager only)
      produces:
      - application/json
      responses:
        "200":
          description: Statistics retrieved successfully
          schema:
            $ref: '#/definitions/models.SystemStats'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - Manager only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get system-wide statistics
      tags:
      - Manager
  /readers:
    get:
      description: Get readers with pagination - THUTHU sees local site only, QUANLY
        sees all sites
      parameters:
      - default: 0
        description: Page number (0-based)
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: size
        type: integer
      - description: Search term for reader name or ID
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Readers retrieved successfully
          schema:
            $ref: '#/definitions/models.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get readers based on user role with pagination
      tags:
      - Readers
    post:
      consumes:
      - application/json
      description: Create a new reader at the user's site (ThuThu only)
      parameters:
      - description: Reader information
        in: body
        name: reader
        required: true
        schema:
          $ref: '#/definitions/models.DocGia'
      produces:
      - application/json
      responses:
        "201":
          description: Reader created successfully
          schema:
            $ref: '#/definitions/models.DocGia'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - ThuThu only
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Reader already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new reader
      tags:
      - Readers
  /readers/{maDG}:
    delete:
      description: Delete a reader (ThuThu only at their site)
      parameters:
      - description: Reader ID
        in: path
        name: maDG
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Reader deleted successfully
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - ThuThu only or wrong site
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Reader not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Cannot delete reader with active borrows
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete reader
      tags:
      - Readers
    get:
      description: Get reader information by ID - access based on user role and reader
        location
      parameters:
      - description: Reader ID
        in: path
        name: maDG
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reader found
          schema:
            $ref: '#/definitions/models.DocGia'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - reader not at user's site
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Reader not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get reader by ID
      tags:
      - Readers
    put:
      consumes:
      - application/json
      description: Update reader information (ThuThu only at their site)
      parameters:
      - description: Reader ID
        in: path
        name: maDG
        required: true
        type: string
      - description: Updated reader information
        in: body
        name: reader
        required: true
        schema:
          $ref: '#/definitions/models.DocGia'
      produces:
      - application/json
      responses:
        "200":
          description: Reader updated successfully
          schema:
            $ref: '#/definitions/models.DocGia'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - ThuThu only or wrong site
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Reader not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update reader
      tags:
      - Readers
  /stats/readers:
    get:
      description: Get readers with borrowing statistics with pagination (enhanced
        for Flutter app)
      parameters:
      - default: 0
        description: Page number (0-based)
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: size
        type: integer
      - description: Search term for reader name or ID
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Readers with stats retrieved successfully
          schema:
            $ref: '#/definitions/models.ListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get readers with statistics and pagination
      tags:
      - Statistics
  /stats/system:
    get:
      description: Get comprehensive system statistics across all sites (Manager only)
      produces:
      - application/json
      responses:
        "200":
          description: System statistics retrieved successfully
          schema:
            $ref: '#/definitions/models.SystemStatsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied - Manager role required
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get system statistics
      tags:
      - Statistics
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
